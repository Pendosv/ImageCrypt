#!/usr/bin/env python3

import sys
from getpass import getpass
from PIL import UnidentifiedImageError
from src.Crypto import CryptImageSave, MoreThanImgError
import os.path


def main(args):
    filename = args.pop(0)

    if ('-h', '--help') in args:
        print('usage:',
              'ImageCrypt [-h] <--encrypt|-e> <image> [message]',
              'ImageCrypt [-h] <--decrypt|-d> <image>',
              '',
              'positional arguments:',
              '  image      path to image',
              ' message     message to be encrypted  not required',
              sep='\n')
        exit(0)

    err_message = f'{filename}: error:\n'
    err_flag = False

    if not args:
        err_flag = True
        err_message += 'no arguments\n'
    else:
        method = args[0]

        if method not in {'--encrypt', '--decrypt', '-e', '-d'}:
            err_flag = True
            err_message += f'unexpected arguments: {method}\n'

        if method in ('--encrypt', '-e'):
            try:
                image = args[1]
            except IndexError:
                err_flag = True
                err_message += '<image> argument are required\n'

            if not err_flag:
                crt = CryptImageSave(image)
                try:
                    message = args[2]
                except IndexError:
                    message = sys.stdin.read()

                try:
                    crt.save_encrypted_image_bash(message, getpass(prompt='Key: '))
                except FileNotFoundError:
                    err_flag = True
                    err_message += f'{image} not found'
                except MoreThanImgError:
                    err_flag = True
                    err_message += f'Length of message <{len(message)}> more than image size'
                except UnidentifiedImageError:
                    err_flag = True
                    err_message += f'{image} not an image'
                else:
                    image_name = '.'.join(os.path.basename(image).split('.')[:-1]) + '_encrypted.bmp'
                    print(f'Image saved as {image_name}')

        elif method in ('--decrypt', '-d'):
            try:
                image = args[1]
            except IndexError:
                err_flag = True
                err_message += '<image> argument are required\n'

            if not err_flag:
                crt = CryptImageSave(image)
                try:
                    print(crt.get_msg_from_image(getpass(prompt='Key: ')))
                except FileNotFoundError:
                    err_flag = True
                    err_message += f'{image} not found'

    if err_flag:
        print(err_message, file=sys.stderr)
        exit(-1)


if __name__ == '__main__':
    try:
        main(sys.argv)
    except KeyboardInterrupt:
        exit(-1)
