#!/usr/bin/env python3
import argparse
from sys import stderr, stdin
from getpass import getpass
from PIL import UnidentifiedImageError
from src.crypto_image import *


argparse.ArgumentParser()
parser = argparse.ArgumentParser(description='Stenography encryption tool')

parser.add_argument(dest='images', nargs='+',
                    help='path to image to encrypt of decrypt')

group = parser.add_mutually_exclusive_group(required=True)
group.add_argument('-e', '--encrypt', dest='encrypt', action='store_true',
                   help='encrypts text in image')

group.add_argument("-d", "--decrypt", dest='decrypt', action="store_true",
                   help='decrypts text from image')

parser.add_argument('-o', '--output', dest='output', action='store', default=None,
                    help='name of output image')

args = parser.parse_args()


def encrypt(image, message, key):

    crt = CryptImageSave(image)

    try:
        new_name = crt.save_encrypted_image_bash(message, key, new_name=args.output)
    except FileNotFoundError:
        print(f'{image} not found', file=stderr)
        return
    except MoreThanImgError:
        print(f'Length of message <{len(message)}> more than image size', file=stderr)
        return
    except UnidentifiedImageError:
        print(f'{image} not an image', file=stderr)
        return
    except PermissionError:
        print(f'Permission denied', file=stderr)
        return
    else:
        print(f'\nImage saved as {new_name}')
        return


def decrypt(image, key):

    crt = CryptImageSave(image)

    try:
        res = crt.get_msg_from_image(key)
    except FileNotFoundError:
        print(f'{image} not found')
        return
    except UnidentifiedImageError:
        print(f'{image} not an image', file=stderr)
        return
    except PermissionError:
        print(f'Permission denied', file=stderr)
        return
    else:
        print(res)


def main():
    if args.encrypt:
        print('Input text: ')
        message = stdin.read()

    for image in args.images:
        if args.encrypt:
            encrypt(image, message, getpass(prompt='\nKey: '))
        elif args.decrypt:
            decrypt(image, getpass(prompt='Key: '))


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        exit(1)
